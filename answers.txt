Name:
UCLA ID:

Collaborators:

-------------------------------------------------------------------------------

Response to Exercise 1:
Yes. I think at this moment, only the process that called sys_getpid() is at the state of P_RUNNABLE. Therefore, all processes will be scanned in the function schedule() but only current process will execute run().

Anything else you'd like us to know:

Response to Exercise 3:
Basically I added one more field to the process descriptor structure as followed:
	pid_t waitingProc;		// Process ID which is waiting for current process to exit
Let's call the calling process as CP and the process which is waitting on by current process as WP.
So now when CP gets into INT_SYS_WAIT, its state be set to P_BLOCKED, and meanwhile the "waitingProc" field of WP will be set to the id of CP. In this case, when WP exits, it goes into INT_SYS_EXIT. And now CP's state will be reset to P_RUNNABLE, which can now continue working.

Extra credit exercises:

Exercise 5:

First let me clarify the difference between volatile int *x and int * volatile x. The first one is a non-volatile pointer which points to a volatile integer while the second means a volatile pointer which points to non-volatile pointer.

Therefore the code should be like this to satisfy the 3 requirements:

void start(void) {
        int x = 0;  /* note that local variable x lives on the stack */
        int * volatile p_x = &x;
        pid_t p = sys_fork();
        if (p == 0)
                *p_x = 1;
        else if (p > 0)
                sys_wait(p); // assume blocking implementation
        app_printf("%d", x);
        sys_exit(0);
}

Exercise 6:

First, I implemented the system call function
pid_t sys_newthread(void (*start_function)(void)){
	pid_t pid;
	asm volatile("int %1\n"
		     : "=a" (pid)
		     : "i" (INT_SYS_NEWTHREAD)
		     	,"a" (start_function)
		     : "cc", "memory");
	return pid;
}

and then we add one more entry to switch (reg->reg_intno) in mpos-kern.c

	case INT_SYS_NEWTHREAD:
		// The 'sys_fork' system call should create a new process.
		// You will have to complete the do_fork() function!
		current->p_registers.reg_eax = create_thread(current,current->p_registers.reg_eax);
		run(current);

After that, we create a new function named create_thread to actually do the job:
One of the most important job in this function is the new thread should start by executing the start_function function: that is, that function's address becomes the new thread's instruction pointer.

static pid_t
do_fork(process_t *parent, void (*start_function)(void))
{
	int i;
	for (i = 1; i < NPROCS; i++) {
		if (proc_array[i].p_state == P_EMPTY)
			break;
	}
	if (i == NPROCS)
		return -1;

	process_t *child = &(proc_array[i]);
	child->p_registers = parent->p_registers;

	child->p_state = P_RUNNABLE;
	child->p_registers.reg_eax = 0;
	
	// Very important !!! The following statement set the next instruction to be the address of start_function
	child->p_registers.reg_eip = start_function; 
	return child->p_pid;
}

Ex 7.

First, I implemented the following system call:

static inline void
sys_kill(pid_t pid)
{

	asm volatile("int %0\n"
		     :
		     : "i" (INT_SYS_KILL),
		       "a" (pid)
		     : "cc", "memory");
 	loop:	goto loop; /* will not be reached */
}

In the kernal,  we add one more entry to switch (reg->reg_intno) in mpos-kern.c

	case INT_SYS_KILL:
		// The 'sys_fork' system call should create a new process.
		// You will have to complete the do_fork() function!
		pid_t p = current->p_registers.reg_eax
		kill_proc(p);
		if (proc_array[p].p_state == P_EMPTY)
			current->p_registers.reg_eax = 1;
		else
			current->p_registers.reg_eax = -1;
		schedule();

In this kill_proc function, we simply kill the targeted process:

void kill_proc(pid_t p){
	proc_array[p].p_state = P_EMPTY;
}

After finishing this system call, we can now implement mpos-app2.c's run_child() function as followed:

void
run_child(void)
{
	int input_counter = counter;

	counter++;		/* Note that all "processes" share an address
				   space, so this change to 'counter' will be
				   visible to all processes. */

	pid_t pid = sys_getpid();
	app_printf("Process %d lives, counter %d!\n",
		   sys_getpid(), input_counter);

	if (pid % 2 == 0){
		for (i = 3; i < NPROCS; i+=2)
			sys_kill(i);
	}

	sys_exit(input_counter);
}
